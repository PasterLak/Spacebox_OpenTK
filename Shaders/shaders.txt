--Vert

#version 330 core

layout(location = 0) in vec2 aPosition;
layout(location = 1) in vec2 aTexCoord;

out vec2 TexCoord;

void main()
{
  
    TexCoord = aTexCoord;
 
    gl_Position = vec4(aPosition, 0.0, 1.0);
}


--Frag

#version 330 core

in vec2 TexCoord; 
out vec4 FragColor;

uniform sampler2D spriteTexture;

uniform float time = 0;
uniform vec2 screen;


void main()
{
  
   
    //vec4 texColor = texture(spriteTexture, TexCoord);

  
   
    vec2 fragCoord2 = TexCoord * screen;

   
    vec2 uv = fragCoord2 / screen;

  
    vec3 col = 0.5 + 0.5 * cos(time + uv.xyx + vec3(0.0, 2.0, 4.0));

  
    FragColor = vec4(col, 1.0);
}



-------------------------------------------------------------------------------



--Vert

#version 330 core

layout(location = 0) in vec2 aPosition;
layout(location = 1) in vec2 aTexCoord;

out vec2 TexCoord;

void main()
{
  
    TexCoord = aTexCoord;
 
    gl_Position = vec4(aPosition, 0.0, 1.0);
}


--Frag

#version 330 core

in vec2 TexCoord;     // Incoming texture coordinates
out vec4 FragColor;   // Output fragment color

uniform float time;   // Time in seconds
uniform vec2 screen;  // Screen resolution in pixels

vec3 palette(float t) {
    vec3 a = vec3(0.5);
    vec3 b = vec3(0.5);
    vec3 c = vec3(1.0);
    vec3 d = vec3(0.263, 0.416, 0.557);

    return a + b * cos(6.28318 * (c * t + d));
}

void main() {
   
    vec2 fragCoord = TexCoord * screen;

   
    vec2 uv = (fragCoord * 2.0 - screen.xy) / screen.y;
    vec2 uv0 = uv;
    vec3 finalColor = vec3(0.0);

    for (float i = 0.0; i < 4.0; i++) {
        uv = fract(uv * 1.5) - 0.5;

        float d = length(uv) * exp(-length(uv0));

        vec3 col = palette(length(uv0) + i * 0.4 + time * 0.4);

        d = sin(d * 8.0 + time) / 8.0;
        d = abs(d);

        d = pow(0.01 / d, 1.2);

        finalColor += col * d;
    }

    FragColor = vec4(finalColor, 1.0);
}


-------------------------------------------------------------------------------